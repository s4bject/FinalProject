{
	"info": {
		"_postman_id": "d47749c9-7973-4d1c-b8d5-e2433e6326a3",
		"name": "tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39020715"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - access_token and token_type\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('access_token');",
							"    pm.expect(responseData).to.have.property('token_type');",
							"});",
							"",
							"",
							"pm.test(\"Access token is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Token type is a valid type (e.g., 'bearer')\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.token_type).to.be.a('string').and.to.match(/bearer/i);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/login?email=j%40j.com&password=1234",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"login"
					],
					"query": [
						{
							"key": "email",
							"value": "j%40j.com"
						},
						{
							"key": "password",
							"value": "1234"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "register",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/register?email=j%40j.com&full_name=a&password=1234&invite_code=5-3",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"register"
					],
					"query": [
						{
							"key": "email",
							"value": "j%40j.com"
						},
						{
							"key": "full_name",
							"value": "a"
						},
						{
							"key": "password",
							"value": "1234"
						},
						{
							"key": "invite_code",
							"value": "5-3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid_login",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/login?email=j%40j.com&password=12345",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"login"
					],
					"query": [
						{
							"key": "email",
							"value": "j%40j.com"
						},
						{
							"key": "password",
							"value": "12345"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid_mail_register",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/register?email=j%40jcom&full_name=a&password=1234&invite_code=5-3",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"register"
					],
					"query": [
						{
							"key": "email",
							"value": "j%40jcom"
						},
						{
							"key": "full_name",
							"value": "a"
						},
						{
							"key": "password",
							"value": "1234"
						},
						{
							"key": "invite_code",
							"value": "5-3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add_task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Task is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.task).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Task should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Worker_id and task_manager_id are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.worker_id).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData.task_manager_id).to.be.a('number').and.to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/add_task_for_1_from_1?task=example&deadline=2025-01-30",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"add_task_for_1_from_1"
					],
					"query": [
						{
							"key": "task",
							"value": "example"
						},
						{
							"key": "deadline",
							"value": "2025-01-30"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get_tasks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the response array structure\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item).to.have.property('id');",
							"    pm.expect(item).to.have.property('task');",
							"    pm.expect(item).to.have.property('worker_id');",
							"    pm.expect(item).to.have.property('task_manager_id');",
							"    pm.expect(item).to.have.property('date_create');",
							"    pm.expect(item).to.have.property('commentary');",
							"    pm.expect(item).to.have.property('grade');",
							"    pm.expect(item).to.have.property('deadline');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Verify the presence of required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item).to.include.all.keys('id', 'task', 'worker_id', 'task_manager_id', 'date_create', 'commentary', 'grade', 'deadline');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Date_create is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.date_create).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Deadline is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(task) {",
							"        pm.expect(task.deadline).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/task_for_1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"task_for_1"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Presence of status_code, detail, and headers in the response body\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status_code).to.exist;",
							"  pm.expect(responseData.detail).to.exist;",
							"  pm.expect(responseData.headers).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Status code is of type number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status_code).to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Detail is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.detail).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Detail should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/delete_task?task_id=1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"delete_task"
					],
					"query": [
						{
							"key": "task_id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_not_exist_task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Status code is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.status_code).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Detail is an empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.detail).to.equal(\"\", \"Detail should be an empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Headers should be null in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.headers).to.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/delete_task?task_id=5000",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"delete_task"
					],
					"query": [
						{
							"key": "task_id",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "comment_task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.include.all.keys('id', 'task', 'worker_id', 'task_manager_id', 'date_create', 'commentary', 'grade', 'deadline');",
							"});",
							"",
							"",
							"pm.test(\"Date_create is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.date_create).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Date_create should be in valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Worker_id and task_manager_id are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.worker_id).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData.task_manager_id).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Commentary is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.commentary).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Commentary should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/comment_task?task_id=1&commentary=example",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"comment_task"
					],
					"query": [
						{
							"key": "task_id",
							"value": "1"
						},
						{
							"key": "commentary",
							"value": "example"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "grade_edit?_task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.be.a('number');",
							"    pm.expect(responseData.id).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Task is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.task).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Task should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Worker_id and task_manager_id are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.worker_id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Worker_id should be a non-negative integer\");",
							"    pm.expect(responseData.task_manager_id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Task_manager_id should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Date_create and Deadline are in valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.date_create).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"    pm.expect(responseData.deadline).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/edit_task?task_id=1&grade=a&deadline=2025-01-30&task=example",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"edit_task"
					],
					"query": [
						{
							"key": "task_id",
							"value": "1"
						},
						{
							"key": "grade",
							"value": "a"
						},
						{
							"key": "deadline",
							"value": "2025-01-30"
						},
						{
							"key": "task",
							"value": "example"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create_news",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('head');",
							"    pm.expect(responseData).to.have.property('description');",
							"    pm.expect(responseData).to.have.property('date_create');",
							"});",
							"",
							"",
							"pm.test(\"Head is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.head).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Head should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Description is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.description).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Date_create is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.date_create).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/, \"Date_create should be in valid date format\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/news?text=example&head=example",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"news"
					],
					"query": [
						{
							"key": "text",
							"value": "example"
						},
						{
							"key": "head",
							"value": "example"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get_news",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Id should be a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.id).to.be.a('number').that.is.not.below(0, \"Id should be a non-negative integer\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Head and description fields must be non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(newsItem) {",
							"        pm.expect(newsItem.head).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Head should not be empty\");",
							"        pm.expect(newsItem.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Date_create is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(newsItem) {",
							"        pm.expect(newsItem.date_create).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/news",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"news"
					]
				}
			},
			"response": []
		},
		{
			"name": "add_meet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('date');",
							"    pm.expect(responseData).to.have.property('duration');",
							"    pm.expect(responseData).to.have.property('creator_id');",
							"    pm.expect(responseData).to.have.property('participants');",
							"});",
							"",
							"",
							"pm.test(\"Date is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});",
							"",
							"",
							"pm.test(\"Participants array is present and contains expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.participants).to.be.an('array');",
							"    pm.expect(responseData.participants).to.have.lengthOf(1);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/add_meet_for_1_from_2?name=meet",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"add_meet_for_1_from_2"
					],
					"query": [
						{
							"key": "name",
							"value": "meet"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "meet_for_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(meeting) {",
							"        pm.expect(meeting).to.have.property('id');",
							"        pm.expect(meeting).to.have.property('name');",
							"        pm.expect(meeting).to.have.property('date');",
							"        pm.expect(meeting).to.have.property('duration');",
							"        pm.expect(meeting).to.have.property('creator_id');",
							"        pm.expect(meeting).to.have.property('participants');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(meeting) {",
							"    pm.expect(meeting.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Date is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Participants array is present and contains expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData).to.have.lengthOf.at.least(1, \"Participants array should not be empty\");",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.participants).to.exist.and.to.be.an('array');",
							"        pm.expect(item.participants).to.have.lengthOf.at.least(1, \"Participants array should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/meet_for_1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"meet_for_1"
					]
				}
			},
			"response": []
		},
		{
			"name": "update_meet",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"meet_id\": 1,\r\n  \"name\": \"string\",\r\n  \"date\": \"2025-01-30\",\r\n  \"new_participants\": [\r\n    12\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/external_update_meet",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"external_update_meet"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_meet",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/delete_meet?meet_id=1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"delete_meet"
					],
					"query": [
						{
							"key": "meet_id",
							"value": "1",
							"description": "id Встречи которую надо удалить"
						}
					]
				}
			},
			"response": []
		}
	]
}